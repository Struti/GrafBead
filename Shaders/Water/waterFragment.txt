#version 400

out vec4 out_color;

#define saturate(A) clamp((A),0,1)

uniform int RENDERMODE;

uniform float water_level;

uniform samplerCube skybox_texture;

uniform sampler2D reflection_texture;
uniform sampler2D refraction_texture;
uniform sampler2D bump_map;
uniform sampler2D foam;

uniform mat4 projection_matrix;
uniform mat4 model_matrix;
uniform mat4 view_matrix;

uniform vec3 camera_position;
uniform vec3 light_direction;
uniform float d_time;

in vec2 normal_textureCoord;
in vec4 world_Vertex;

in vec3 wave_normal;
in mat3 normal_base_matrix;

vec4 screen_coord = projection_matrix*view_matrix*vec4(world_Vertex.x,water_level,world_Vertex.zw);
vec4 screen_coord2 = projection_matrix*view_matrix*vec4(world_Vertex);

vec2 texCoord0=vec2((screen_coord.x/screen_coord.w+1)/2,(screen_coord.y/screen_coord.w+1)/2);
vec2 texCoord1=vec2((screen_coord2.x/screen_coord2.w+1)/2,(screen_coord2.y/screen_coord2.w+1)/2);

const float sun_strength = 30.9f;
const vec3 sun_colour = vec3(1.0,0.9,0.8);

const float kDistortion = 0.115f;
const float kReflection = 0.135f;
vec4 water_swallow_color =vec4(0.45, 0.45, 0.6,1);

float visibility = 6;
float unsaturated_depth=1;
float depth_scale=4;
float depth_exp=1;

float foam_start = water_level-0.65;
float foam_end = foam_start+0.3;


float Fresnel(float NdotL, float fresnelBias, float fresnelPow)
{
	float facing = (1.0 - NdotL);
	return max(fresnelBias + (1.0 - fresnelBias) * pow(facing, fresnelPow), 0.0);
}


void main(void)
{
	float time = d_time;

	float depthlod = saturate(20/screen_coord.z);

	if(visibility<=0) visibility=1;

	vec4 wat_pos = world_Vertex.xyzw;

	vec3 eye_vector=normalize(camera_position.xyz-world_Vertex.xyz);

	vec3 water_normal;
	vec3 water_normal1 = texture2D(bump_map,normal_textureCoord.xy/7               +vec2(1,0.2)*time/30.0f).rbg;
	vec3 water_normal2 = texture2D(bump_map,(vec2(1,1)-normal_textureCoord.xy)/5   +vec2(.4,.1)*time/10.0f).rbg;
	vec3 water_normal3 = texture2D(bump_map,normal_textureCoord.xy/6               -vec2(1,1)*time/60.0f).rbg;
	vec3 water_normal4 = texture2D(bump_map,(vec2(1,1)-normal_textureCoord.xy)/7   -vec2(1,0)*time/20.0f).rbg;

	water_normal = ((water_normal1 +water_normal2 +water_normal3+water_normal4)/4);
	water_normal = normalize(2.0f*(water_normal-0.5f));
	water_normal = normalize(normal_base_matrix*water_normal);

	float screendepth = saturate(30/screen_coord2.z);
	water_normal = mix(normal_base_matrix*water_normal,vec3(0,1,0),1-screendepth);

	if(water_normal.y<0) water_normal.y=0;

	vec4 foam = texture2D(foam,(normal_textureCoord.xy-time)/5);
	float foamcoeff = saturate((world_Vertex.y-foam_start)/(foam_end-foam_start));
	foamcoeff *= saturate(dot(water_normal,vec3(0,1,0)));

	vec3 invLightDir= -normalize(light_direction.xyz);

	float fNdotL = max(dot(eye_vector, water_normal), 0.0f);
	float facing = saturate(1.0f - fNdotL);
	float fresnel = saturate(Fresnel(fNdotL, 0.7f, 5.0f));

	vec4 water_reflection = texture2D(reflection_texture, texCoord0.xy + water_normal.xz*kReflection);
	vec4 water_refraction = texture2D(refraction_texture, texCoord1.xy + water_normal.xz*kDistortion);

	vec4 sky = texture(skybox_texture, reflect(-eye_vector, water_normal));
	water_reflection = mix(sky, water_reflection, water_reflection.a);

	vec3 specular;
	if(dot(water_normal, invLightDir) < 0.0) 
	{
		specular = vec3(0.0, 0.0, 0.0); 
	}
	else
	{
		vec3 H = normalize(invLightDir + eye_vector);
		float NdotH = max(dot(water_normal,H),0.0f);
		specular = saturate(sun_colour*pow(NdotH,sun_strength));
	}

	vec3 reflections = fresnel*(water_reflection.rgb + specular);
	vec3 refractions = vec3(water_refraction);

	vec3 result = refractions + reflections;
	vec4 water_texture = vec4(result,1)+foam*foamcoeff*screendepth;

	out_color = mix(water_texture, water_swallow_color, 0.6);
}